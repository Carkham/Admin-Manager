// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"admin/model/model"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserUser(db *gorm.DB, opts ...gen.DOOption) userUser {
	_userUser := userUser{}

	_userUser.userUserDo.UseDB(db, opts...)
	_userUser.userUserDo.UseModel(&model.UserUser{})

	tableName := _userUser.userUserDo.TableName()
	_userUser.ALL = field.NewAsterisk(tableName)
	_userUser.ID = field.NewInt64(tableName, "id")
	_userUser.LastLogin = field.NewTime(tableName, "last_login")
	_userUser.IsSuperuser = field.NewBool(tableName, "is_superuser")
	_userUser.FirstName = field.NewString(tableName, "first_name")
	_userUser.LastName = field.NewString(tableName, "last_name")
	_userUser.IsStaff = field.NewBool(tableName, "is_staff")
	_userUser.IsActive = field.NewBool(tableName, "is_active")
	_userUser.DateJoined = field.NewTime(tableName, "date_joined")
	_userUser.Username = field.NewString(tableName, "username")
	_userUser.Password = field.NewString(tableName, "password")
	_userUser.Email = field.NewString(tableName, "email")
	_userUser.Avatar = field.NewString(tableName, "avatar")

	_userUser.fillFieldMap()

	return _userUser
}

type userUser struct {
	userUserDo

	ALL         field.Asterisk
	ID          field.Int64
	LastLogin   field.Time
	IsSuperuser field.Bool
	FirstName   field.String
	LastName    field.String
	IsStaff     field.Bool
	IsActive    field.Bool
	DateJoined  field.Time
	Username    field.String
	Password    field.String
	Email       field.String
	Avatar      field.String

	fieldMap map[string]field.Expr
}

func (u userUser) Table(newTableName string) *userUser {
	u.userUserDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userUser) As(alias string) *userUser {
	u.userUserDo.DO = *(u.userUserDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userUser) updateTableName(table string) *userUser {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.LastLogin = field.NewTime(table, "last_login")
	u.IsSuperuser = field.NewBool(table, "is_superuser")
	u.FirstName = field.NewString(table, "first_name")
	u.LastName = field.NewString(table, "last_name")
	u.IsStaff = field.NewBool(table, "is_staff")
	u.IsActive = field.NewBool(table, "is_active")
	u.DateJoined = field.NewTime(table, "date_joined")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Email = field.NewString(table, "email")
	u.Avatar = field.NewString(table, "avatar")

	u.fillFieldMap()

	return u
}

func (u *userUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userUser) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["last_login"] = u.LastLogin
	u.fieldMap["is_superuser"] = u.IsSuperuser
	u.fieldMap["first_name"] = u.FirstName
	u.fieldMap["last_name"] = u.LastName
	u.fieldMap["is_staff"] = u.IsStaff
	u.fieldMap["is_active"] = u.IsActive
	u.fieldMap["date_joined"] = u.DateJoined
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["email"] = u.Email
	u.fieldMap["avatar"] = u.Avatar
}

func (u userUser) clone(db *gorm.DB) userUser {
	u.userUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userUser) replaceDB(db *gorm.DB) userUser {
	u.userUserDo.ReplaceDB(db)
	return u
}

type userUserDo struct{ gen.DO }

type IUserUserDo interface {
	gen.SubQuery
	Debug() IUserUserDo
	WithContext(ctx context.Context) IUserUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserUserDo
	WriteDB() IUserUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserUserDo
	Not(conds ...gen.Condition) IUserUserDo
	Or(conds ...gen.Condition) IUserUserDo
	Select(conds ...field.Expr) IUserUserDo
	Where(conds ...gen.Condition) IUserUserDo
	Order(conds ...field.Expr) IUserUserDo
	Distinct(cols ...field.Expr) IUserUserDo
	Omit(cols ...field.Expr) IUserUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserUserDo
	Group(cols ...field.Expr) IUserUserDo
	Having(conds ...gen.Condition) IUserUserDo
	Limit(limit int) IUserUserDo
	Offset(offset int) IUserUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserUserDo
	Unscoped() IUserUserDo
	Create(values ...*model.UserUser) error
	CreateInBatches(values []*model.UserUser, batchSize int) error
	Save(values ...*model.UserUser) error
	First() (*model.UserUser, error)
	Take() (*model.UserUser, error)
	Last() (*model.UserUser, error)
	Find() ([]*model.UserUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserUser, err error)
	FindInBatches(result *[]*model.UserUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserUserDo
	Assign(attrs ...field.AssignExpr) IUserUserDo
	Joins(fields ...field.RelationField) IUserUserDo
	Preload(fields ...field.RelationField) IUserUserDo
	FirstOrInit() (*model.UserUser, error)
	FirstOrCreate() (*model.UserUser, error)
	FindByPage(offset int, limit int) (result []*model.UserUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userUserDo) Debug() IUserUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userUserDo) WithContext(ctx context.Context) IUserUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userUserDo) ReadDB() IUserUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userUserDo) WriteDB() IUserUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userUserDo) Session(config *gorm.Session) IUserUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userUserDo) Clauses(conds ...clause.Expression) IUserUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userUserDo) Returning(value interface{}, columns ...string) IUserUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userUserDo) Not(conds ...gen.Condition) IUserUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userUserDo) Or(conds ...gen.Condition) IUserUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userUserDo) Select(conds ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userUserDo) Where(conds ...gen.Condition) IUserUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserUserDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userUserDo) Order(conds ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userUserDo) Distinct(cols ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userUserDo) Omit(cols ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userUserDo) Join(table schema.Tabler, on ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userUserDo) Group(cols ...field.Expr) IUserUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userUserDo) Having(conds ...gen.Condition) IUserUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userUserDo) Limit(limit int) IUserUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userUserDo) Offset(offset int) IUserUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userUserDo) Unscoped() IUserUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userUserDo) Create(values ...*model.UserUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userUserDo) CreateInBatches(values []*model.UserUser, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userUserDo) Save(values ...*model.UserUser) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userUserDo) First() (*model.UserUser, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserUser), nil
	}
}

func (u userUserDo) Take() (*model.UserUser, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserUser), nil
	}
}

func (u userUserDo) Last() (*model.UserUser, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserUser), nil
	}
}

func (u userUserDo) Find() ([]*model.UserUser, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserUser), err
}

func (u userUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserUser, err error) {
	buf := make([]*model.UserUser, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userUserDo) FindInBatches(result *[]*model.UserUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userUserDo) Attrs(attrs ...field.AssignExpr) IUserUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userUserDo) Assign(attrs ...field.AssignExpr) IUserUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userUserDo) Joins(fields ...field.RelationField) IUserUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userUserDo) Preload(fields ...field.RelationField) IUserUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userUserDo) FirstOrInit() (*model.UserUser, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserUser), nil
	}
}

func (u userUserDo) FirstOrCreate() (*model.UserUser, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserUser), nil
	}
}

func (u userUserDo) FindByPage(offset int, limit int) (result []*model.UserUser, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userUserDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userUserDo) Delete(models ...*model.UserUser) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userUserDo) withDO(do gen.Dao) *userUserDo {
	u.DO = *do.(*gen.DO)
	return u
}
