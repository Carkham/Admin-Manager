// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"admin/model/model"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFunction(db *gorm.DB, opts ...gen.DOOption) function {
	_function := function{}

	_function.functionDo.UseDB(db, opts...)
	_function.functionDo.UseModel(&model.Function{})

	tableName := _function.functionDo.TableName()
	_function.ALL = field.NewAsterisk(tableName)
	_function.FunctionID = field.NewInt64(tableName, "function_id")
	_function.FunctionLabel = field.NewString(tableName, "function_label")
	_function.UserID = field.NewInt64(tableName, "user_id")
	_function.TriggerID = field.NewInt64(tableName, "trigger_id")
	_function.SrcType = field.NewString(tableName, "src_type")
	_function.SrcLoc = field.NewString(tableName, "src_loc")
	_function.Replicas = field.NewInt32(tableName, "replicas")
	_function.QuotaInfo = field.NewString(tableName, "quota_info")
	_function.TemplateID = field.NewInt64(tableName, "template_id")

	_function.fillFieldMap()

	return _function
}

type function struct {
	functionDo

	ALL           field.Asterisk
	FunctionID    field.Int64  // 函数主键
	FunctionLabel field.String // 函数名称
	UserID        field.Int64  // 所属用户的id
	TriggerID     field.Int64  // 触发器的id
	SrcType       field.String // 源代码导入方式
	SrcLoc        field.String // 代码定位数据
	Replicas      field.Int32  // 副本数
	QuotaInfo     field.String // 配额信息
	TemplateID    field.Int64  // 模板ID

	fieldMap map[string]field.Expr
}

func (f function) Table(newTableName string) *function {
	f.functionDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f function) As(alias string) *function {
	f.functionDo.DO = *(f.functionDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *function) updateTableName(table string) *function {
	f.ALL = field.NewAsterisk(table)
	f.FunctionID = field.NewInt64(table, "function_id")
	f.FunctionLabel = field.NewString(table, "function_label")
	f.UserID = field.NewInt64(table, "user_id")
	f.TriggerID = field.NewInt64(table, "trigger_id")
	f.SrcType = field.NewString(table, "src_type")
	f.SrcLoc = field.NewString(table, "src_loc")
	f.Replicas = field.NewInt32(table, "replicas")
	f.QuotaInfo = field.NewString(table, "quota_info")
	f.TemplateID = field.NewInt64(table, "template_id")

	f.fillFieldMap()

	return f
}

func (f *function) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *function) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["function_id"] = f.FunctionID
	f.fieldMap["function_label"] = f.FunctionLabel
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["trigger_id"] = f.TriggerID
	f.fieldMap["src_type"] = f.SrcType
	f.fieldMap["src_loc"] = f.SrcLoc
	f.fieldMap["replicas"] = f.Replicas
	f.fieldMap["quota_info"] = f.QuotaInfo
	f.fieldMap["template_id"] = f.TemplateID
}

func (f function) clone(db *gorm.DB) function {
	f.functionDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f function) replaceDB(db *gorm.DB) function {
	f.functionDo.ReplaceDB(db)
	return f
}

type functionDo struct{ gen.DO }

type IFunctionDo interface {
	gen.SubQuery
	Debug() IFunctionDo
	WithContext(ctx context.Context) IFunctionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFunctionDo
	WriteDB() IFunctionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFunctionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFunctionDo
	Not(conds ...gen.Condition) IFunctionDo
	Or(conds ...gen.Condition) IFunctionDo
	Select(conds ...field.Expr) IFunctionDo
	Where(conds ...gen.Condition) IFunctionDo
	Order(conds ...field.Expr) IFunctionDo
	Distinct(cols ...field.Expr) IFunctionDo
	Omit(cols ...field.Expr) IFunctionDo
	Join(table schema.Tabler, on ...field.Expr) IFunctionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFunctionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFunctionDo
	Group(cols ...field.Expr) IFunctionDo
	Having(conds ...gen.Condition) IFunctionDo
	Limit(limit int) IFunctionDo
	Offset(offset int) IFunctionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFunctionDo
	Unscoped() IFunctionDo
	Create(values ...*model.Function) error
	CreateInBatches(values []*model.Function, batchSize int) error
	Save(values ...*model.Function) error
	First() (*model.Function, error)
	Take() (*model.Function, error)
	Last() (*model.Function, error)
	Find() ([]*model.Function, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Function, err error)
	FindInBatches(result *[]*model.Function, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Function) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFunctionDo
	Assign(attrs ...field.AssignExpr) IFunctionDo
	Joins(fields ...field.RelationField) IFunctionDo
	Preload(fields ...field.RelationField) IFunctionDo
	FirstOrInit() (*model.Function, error)
	FirstOrCreate() (*model.Function, error)
	FindByPage(offset int, limit int) (result []*model.Function, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFunctionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f functionDo) Debug() IFunctionDo {
	return f.withDO(f.DO.Debug())
}

func (f functionDo) WithContext(ctx context.Context) IFunctionDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f functionDo) ReadDB() IFunctionDo {
	return f.Clauses(dbresolver.Read)
}

func (f functionDo) WriteDB() IFunctionDo {
	return f.Clauses(dbresolver.Write)
}

func (f functionDo) Session(config *gorm.Session) IFunctionDo {
	return f.withDO(f.DO.Session(config))
}

func (f functionDo) Clauses(conds ...clause.Expression) IFunctionDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f functionDo) Returning(value interface{}, columns ...string) IFunctionDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f functionDo) Not(conds ...gen.Condition) IFunctionDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f functionDo) Or(conds ...gen.Condition) IFunctionDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f functionDo) Select(conds ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f functionDo) Where(conds ...gen.Condition) IFunctionDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f functionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFunctionDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f functionDo) Order(conds ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f functionDo) Distinct(cols ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f functionDo) Omit(cols ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f functionDo) Join(table schema.Tabler, on ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f functionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f functionDo) RightJoin(table schema.Tabler, on ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f functionDo) Group(cols ...field.Expr) IFunctionDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f functionDo) Having(conds ...gen.Condition) IFunctionDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f functionDo) Limit(limit int) IFunctionDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f functionDo) Offset(offset int) IFunctionDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f functionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFunctionDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f functionDo) Unscoped() IFunctionDo {
	return f.withDO(f.DO.Unscoped())
}

func (f functionDo) Create(values ...*model.Function) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f functionDo) CreateInBatches(values []*model.Function, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f functionDo) Save(values ...*model.Function) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f functionDo) First() (*model.Function, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Function), nil
	}
}

func (f functionDo) Take() (*model.Function, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Function), nil
	}
}

func (f functionDo) Last() (*model.Function, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Function), nil
	}
}

func (f functionDo) Find() ([]*model.Function, error) {
	result, err := f.DO.Find()
	return result.([]*model.Function), err
}

func (f functionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Function, err error) {
	buf := make([]*model.Function, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f functionDo) FindInBatches(result *[]*model.Function, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f functionDo) Attrs(attrs ...field.AssignExpr) IFunctionDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f functionDo) Assign(attrs ...field.AssignExpr) IFunctionDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f functionDo) Joins(fields ...field.RelationField) IFunctionDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f functionDo) Preload(fields ...field.RelationField) IFunctionDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f functionDo) FirstOrInit() (*model.Function, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Function), nil
	}
}

func (f functionDo) FirstOrCreate() (*model.Function, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Function), nil
	}
}

func (f functionDo) FindByPage(offset int, limit int) (result []*model.Function, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f functionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f functionDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f functionDo) Delete(models ...*model.Function) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *functionDo) withDO(do gen.Dao) *functionDo {
	f.DO = *do.(*gen.DO)
	return f
}
